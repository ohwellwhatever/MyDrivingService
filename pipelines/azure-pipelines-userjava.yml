# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '75f5bbf3-21b8-4d66-b774-f62c7d72c01f'
  imageRepository: 'devopsoh/api-user-java'
  containerRegistry: 'openhacka2k61f74acr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/apis/user-java/Dockerfile'
  tag: '$(Build.BuildId)'

steps:

- task: Maven@3
  inputs:
    mavenPomFile: 'apis/user-java/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: Docker@2
  inputs:
    command: buildAndPush
    repository: $(imageRepository)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      latest
      $(tag)

- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'OTA-PRD-158(4631b064-cd36-4785-99b7-195ab94da98b)'
    appType: 'webAppContainer'
    WebAppName: 'openhacka2k61f74userjava'
    deployToSlotOrASE: true
    ResourceGroupName: 'openhacka2k61f74rg'
    SlotName: 'staging'
    DockerNamespace: $(containerRegistry)
    DockerRepository: $(imageRepository)
    DockerImageTag: '$(Build.BuildId)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        $timeout = new-timespan -Minutes 2
        $sw = [diagnostics.stopwatch]::StartNew()
        $R = $null
        while ($sw.elapsed -lt $timeout){
            try{
                $R = Invoke-WebRequest -URI "https://openhacka2k61f74userjava-staging.azurewebsites.net/api/healthcheck/user-java"
                if ($R.StatusCode -eq "200"){
                    exit 0
                }
                else{
                    write-host "Status:" + $R.StatusCode
                }
            }
            catch{
                write-host "Not 200 :("
            }
            Start-Sleep -Seconds 10
        }
        exit 1
    pwsh: true


- task: AzureAppServiceManage@0
  inputs:
    azureSubscription: 'OTA-PRD-158(4631b064-cd36-4785-99b7-195ab94da98b)'
    Action: 'Swap Slots'
    WebAppName: 'openhacka2k61f74userjava'
    ResourceGroupName: 'openhacka2k61f74rg'
    SourceSlot: 'staging'