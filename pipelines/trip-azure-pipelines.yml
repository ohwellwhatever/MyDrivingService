# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger: 
 - master

pool:
   vmImage: 'ubuntu-latest'

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '75f5bbf3-21b8-4d66-b774-f62c7d72c01f'
  imageRepository: 'devopsoh/api-trips'
  containerRegistry: 'openhacka2k61f74acr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/apis/trips/Dockerfile'
  tag: '$(Build.BuildId)'

steps: 
- task: GoTool@0
  inputs:
    version: '1.13.15'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)/apis/trips'
- task: Go@0
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)/apis/trips'
- task: Go@0
  inputs:
    command: 'test'
    arguments: '-v ./tests'
    workingDirectory: '$(System.DefaultWorkingDirectory)/apis/trips'
- task: Docker@2
  displayName: Build and push an image to container registry
  inputs:
    command: buildAndPush
    repository: $(imageRepository)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)
- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'OTA-PRD-158(4631b064-cd36-4785-99b7-195ab94da98b)'
    appType: 'webAppContainer'
    WebAppName: 'openhacka2k61f74trips'
    deployToSlotOrASE: true
    ResourceGroupName: 'openhacka2k61f74rg'
    SlotName: 'staging'
    DockerNamespace: 'openhacka2k61f74acr.azurecr.io'
    DockerRepository: 'devopsoh/api-trips'
    DockerImageTag: '$(Build.BuildId)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        $timeout = new-timespan -Minutes 2
        $sw = [diagnostics.stopwatch]::StartNew()
        $R = $null
        while ($sw.elapsed -lt $timeout){
            try{
                $R = Invoke-WebRequest -URI "https://openhacka2k61f74trips-staging.azurewebsites.net/api/healthcheck/trips"
                if ($R.StatusCode -eq "200"){
                    exit 0
                }
                else{
                    write-host "Status:" + $R.StatusCode
                }
            }
            catch{
                write-host "Not 200 :("
            }
            Start-Sleep -Seconds 10
        }
        exit 1
    pwsh: true


- task: AzureAppServiceManage@0
  inputs:
    azureSubscription: 'OTA-PRD-158(4631b064-cd36-4785-99b7-195ab94da98b)'
    Action: 'Swap Slots'
    WebAppName: 'openhacka2k61f74trips'
    ResourceGroupName: 'openhacka2k61f74rg'
    SourceSlot: 'staging'
